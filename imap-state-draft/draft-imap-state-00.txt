


IETF                                                          M. Slusarz
Internet-Draft                                                 Horde LLC
Intended status: Standards Track                        October 30, 2012
Expires: May 3, 2013


                          IMAP STATE Extension
                          draft-imap-state-00

Abstract

   This document defines a STATE extension for the IMAP4rev1 protocol.
   It provides a method for a mail client to save the current state of
   an IMAP session and then quickly restore this state in a subsequent
   session.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on May 3, 2013.

Copyright Notice

   Copyright (c) 2012 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.




Slusarz                    Expires May 3, 2013                  [Page 1]

Internet-Draft            IMAP STATE Extension              October 2012


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . . 3
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . . . 4
   2.  IMAP Protocol Changes . . . . . . . . . . . . . . . . . . . . . 4
     2.1.  STATE Command . . . . . . . . . . . . . . . . . . . . . . . 4
       2.1.1.  STATE Command with Optional Token Argument  . . . . . . 4
       2.1.2.  STATE Command with No Argument  . . . . . . . . . . . . 5
     2.2.  SAVESTATE Command . . . . . . . . . . . . . . . . . . . . . 5
     2.3.  STATE Response  . . . . . . . . . . . . . . . . . . . . . . 5
     2.4.  SAVESTATE Response  . . . . . . . . . . . . . . . . . . . . 6
     2.5.  STATECMD Response Code  . . . . . . . . . . . . . . . . . . 6
   3.  Examples  . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
   4.  Formal Syntax . . . . . . . . . . . . . . . . . . . . . . . . . 8
   5.  IANA Considerations . . . . . . . . . . . . . . . . . . . . . . 8
   6.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . 8
   7.  Security Considerations . . . . . . . . . . . . . . . . . . . . 8
   8.  Normative References  . . . . . . . . . . . . . . . . . . . . . 8
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . . . 9
































Slusarz                    Expires May 3, 2013                  [Page 2]

Internet-Draft            IMAP STATE Extension              October 2012


1.  Introduction

   [TODO: Reorganize this section.  Disconnected talk should probably go
   lower in section, after talk about activating extensions.]

   The original IMAP4rev1 [RFC3501] protocol specification was primarily
   designed to be used by clients that remain connected to the IMAP
   server for extended periods of time.  Since that time, "disconnected"
   IMAP clients [RFC4549] have become increasingly popular and numerous,
   due to the rise in, for example, portable devices that do not have
   persistent connections to the remove server, or for which keeping an
   active connection is expensive (in terms of computing and/or power).

   In response to the rise of these disconnected clients, various IMAP
   extensions have been developed to assist in managing the remote
   account.  [TODO: Links to LEMONDAE profile?  UIDPLUS?]  Some of these
   extensions, such as QRESYNC [RFC5162], require explicit action by the
   client in order to activate their features.

   Additionally, advanced IMAP features have been implemented as various
   extensions, many of which require proactive action by the client in
   order to activate their fetures.  [TODO: Links to LANGUAGE?  NOTIFY?]

   Finally, there is additional overhead when connecting to an IMAP
   server (e.g. entering authenticated state) because the client needs
   to do things like determine the capabilities of the remote server
   (CAPABILITY command - RFC 3551 [6.1.1]) and, possibly, send/receive
   identification information (ID command [RFC2971]).

   Therefore, even if a disconnected client connects to an IMAP4rev1
   server that supports all extensions, it still faces the (potentially
   substantial) overhead of needing to perform all of these
   initialization tasks before the client can begin to do "useful" work
   from the perspective of a user (e.g. listing mailboxes, accessing
   messages).  For clients that are unable to maintain an IMAP
   connection (clients connecting through HTTP - webmail clients), many
   of the gains provided by these existing IMAP extensions are tempered
   by the overhead to enable them on every access.

   The STATE extensions provides a mechanism for a client to save the
   state of an existing session, and then quickly re-establish this
   state on the next server access.

   An IMAP server that supports STATE advertises this by including the
   word STATE in its capability list.






Slusarz                    Expires May 3, 2013                  [Page 3]

Internet-Draft            IMAP STATE Extension              October 2012


1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].


2.  IMAP Protocol Changes

2.1.  STATE Command

   Arguments:  OPTIONAL state token

   Responses:  OPTIONAL untagged response: STATE

   Result:     OK - state command completed succesfully
               NO - error: state storage not available
               BAD - command unknown or arguments invalid

   This section defines a new STATE command.

   The STATE command serves two purposes.  With the optional token
   argument, it is the client's attempt to restore state given the
   previous token generated by the server.  Without this argument, it
   indicates to the server that the client will attempt to save state
   later in the session and the server MUST send the STATECMD (see
   Section 2.5) response code for any command that will be stored via
   the state token.

   The STATE command MUST only be issued in the IMAP authenticated state
   (the state token could potentially include sensitive information and
   should only be sent after any security layer has been initiated).

   If a client issues this command, and the server responds with an OK
   tagged result, the server MUST send the STATECMD response code (see
   Section 2.5) for any additional command issued that can be saved via
   a state token.

2.1.1.  STATE Command with Optional Token Argument

   If the optional state token argument is provided, this is the
   client's attempt to restore the state from a previous session.  The
   token argument is the token string returned by the IMAP server in
   response to a SAVESTATE command issued in a previous session.

   If the server can successfully restore the state indicated by the
   given token, it MUST issue an untagged STATE response (see
   Section 2.3).



Slusarz                    Expires May 3, 2013                  [Page 4]

Internet-Draft            IMAP STATE Extension              October 2012


   If the server can not restore the state, no STATE untagged response
   should be returned.

2.1.2.  STATE Command with No Argument

   If the state token argument is not provided, this indicates that the
   client does not wish to restore the state with a previous token.
   However, the client desires that STATECMD response codes be sent as
   the client will issue a SAVESTATE command once it has completed all
   initialization tasks necessary.

2.2.  SAVESTATE Command

   Arguments:  none

   Responses:  REQUIRED untagged response: SAVESTATE

   Result:     OK - state successfully stored
               NO - error: state could not be stored
               BAD - command unknown or arguments invalid

   This section defines a new SAVESTATE command.

   This command takes no arguments.  If the current IMAP session state
   can be saved, this command causes an untagged SAVESTATE response (see
   Section 2.4) to be issued which contains a token string that can be
   used to restore the current state, as it exists at the time the
   SAVESTATE command was issued.

   If a server cannot save state, a SAVESTATE response MUST NOT be
   issued and a NO tagged response MUST be returned.

   [TODO: Should this command require that STATE be issued earlier in
   the session?

2.3.  STATE Response

   Contents:   state token

   The STATE response occurs as a result of a STATE command.  The state
   token refers to the token argument provided to the STATE command.
   This response indicates that the server successfully restored the
   session state to be identical to that as when the client issued the
   SAVESTATE command in a previous IMAP session.







Slusarz                    Expires May 3, 2013                  [Page 5]

Internet-Draft            IMAP STATE Extension              October 2012


2.4.  SAVESTATE Response

   Contents:   state token

   The STATE response occurs as a result of a SAVESTATE command.  The
   state token is a server-specific representation of the current state
   in the IMAP session.  The current state consists of all IMAP commands
   issued after a successful STATE command (see Section 2.1) that
   returned a STATECMD response (see Section 2.5).

   It is RECOMMENDED that the state token contain some sort of
   versioning mechanism that would cause the token to be unsuccessful in
   restoring state in case the internal state storage mechanism in the
   server would change in the future.  However, interpretation of the
   contents or format of the state token is left entirely to the server
   implementor.

2.5.  STATECMD Response Code

   This document adds a new response code that is returned in the OK
   untagged response for a successful IMAP command that can be stored in
   the state:

               OK [STATECMD <tag>]

               where <tag> is the tag of the command that can be stored
               in the saved state.

   This response code indicates to the client that the command is part
   of the saved state and does not need to be executed again if the
   state is successfully restored via STATE (see Section 2.1) in a
   subsequent IMAP session.



















Slusarz                    Expires May 3, 2013                  [Page 6]

Internet-Draft            IMAP STATE Extension              October 2012


3.  Examples

   Example 1: A client connects to a server and does not have any prior
   state information.  The client verifies that the server supports the
   STATE extension, performs its initialization, and obtains a state
   token.  This example assumes that the client has successfully
   completed authorization to the IMAP server.

             C: A1 CAPABILITY
             S: * CAPABILITY IMAP4rev1 ID ENABLE QRESYNC I18NLEVEL=1
                  STATE
             S: A1 OK Capability command completed.
             C: A2 STATE
             S: A2 OK State not restored, but state command tracking
                   enabled.
             C: A3 ID ("name" "foo" "version" "1.0")
             S: * ID ("name" "foo2" "version" "2.0")
             S: A3 ID command completed.
             C: A4 ENABLE QRESYNC
             S: * ENABLED QRESYNC
             S: * OK [STATECMD A4] QRESYNC command will be saved in
                  state data.
             S: A4 OK Enable command completed.
             C: A5 LANGUAGE DE
             S: * LANGUAGE (DE)
             S: * NAMESPACE (("" "/")) (("Other Users/" "/"
                  "TRANSLATION" ("Andere Ben&APw-tzer/")))
                  (("Public Folders/" "/" "TRANSLATION"
                  ("Gemeinsame Postf&AM8-cher/")))
             S: * OK [STATECMD A5] LANGUAGE command will be saved in
                  state data.
             S: A5 Sprachwechsel durch LANGUAGE-Befehl ausgefuehrt
             C: A6 SAVESTATE
             S: * SAVESTATE c3RhdGUgdG9rZW4=
             S: A6 Savestate command completed.

   Example 2: The client in Example 1 connects at a future time to the
   same server and seeks to restore the previous IMAP session.  This
   example assumes that the client has successfully completed
   authorization to the IMAP server.  (Note that neither the CAPABILITY
   nor the ID command in Example 1 are saved in the state.  However, a
   successful restoration of the state implies that the server has not
   changed.  If the client has cached CAPABILITY data associated with
   the STATE token, and only desired to send the ID command once per
   client session, it does not need to issue either of these commands
   again.)





Slusarz                    Expires May 3, 2013                  [Page 7]

Internet-Draft            IMAP STATE Extension              October 2012


             C: A1 STATE c3RhdGUgdG9rZW4=
             S: * STATE c3RhdGUgdG9rZW4=
             S: A1 OK Angemeldet.


4.  Formal Syntax

   The following syntax specification uses the Augmented Backus-Naur
   Form (ABNF) as described in [RFC5234].  Terms not defined here are
   taken from [RFC3501].

   capability =/  "STATE"

   command-auth =/  state / savestate

   response-data =/  "*" SP state-response CRLF

   resp-text-code =/  STATECMD SP tag

   savestate =  "SAVESTATE"

   state = "STATE" *(SP state-token)

   state-response =  "SAVESTATE" SP state-token / "STATE" SP state-token

   state-token =  astring


5.  IANA Considerations

   The IANA is requested to add STATE to the "IMAP 4 Capabilities"
   registry, http://www.iana.org/assignments/imap4-capabilities.


6.  Acknowledgements


7.  Security Considerations

   It is believed that this extension doesn't add any security
   considerations that are not already present in the base IMAP protocol
   [RFC3501].


8.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.



Slusarz                    Expires May 3, 2013                  [Page 8]

Internet-Draft            IMAP STATE Extension              October 2012


   [RFC2971]  Showalter, T., "IMAP4 ID extension", RFC 2971,
              October 2000.

   [RFC3501]  Crispin, M., "INTERNET MESSAGE ACCESS PROTOCOL - VERSION
              4rev1", RFC 3501, March 2003.

   [RFC4549]  Melnikov, A., "Synchronization Operations for Disconnected
              IMAP4 Clients", RFC 4549, June 2006.

   [RFC5162]  Melnikov, A., Cridland, D., and C. Wilson, "IMAP4
              Extensions for Quick Mailbox Resynchronization", RFC 5162,
              March 2008.

   [RFC5234]  Crocker, D. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, RFC 5234, January 2008.


Author's Address

   Michael M. Slusarz
   Horde LLC
   Denver, Colorado
   USA

   Email: slusarz@horde.org


























Slusarz                    Expires May 3, 2013                  [Page 9]


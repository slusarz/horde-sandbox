<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2971 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2971.xml">
<!ENTITY RFC3501 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3501.xml">
<!ENTITY RFC4549 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4549.xml">
<!ENTITY RFC5162 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5162.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="std" docName="draft-imap-state-00" ipr="full3978">
  <front>
    <title>IMAP STATE Extension</title>

    <author fullname="Michael M. Slusarz" initials="M.M." surname="Slusarz">
      <organization>Horde LLC</organization>
      <address>
        <postal>
          <street></street>
          <city>Denver</city>
          <region>Colorado</region>
          <code></code>
          <country>USA</country>
        </postal>
        <email>slusarz@horde.org</email>
      </address>
    </author>

    <date month="October" year="2012" />

    <area>General</area>
    <workgroup>IETF</workgroup>

    <keyword>IMAP</keyword>
    <keyword>STATE</keyword>
    <keyword>disconnected</keyword>

    <abstract>
      <t>This document defines a STATE extension for the IMAP4rev1 protocol.
      It provides a method for a mail client to save the current state of
      an IMAP session and then quickly restore this state in a subsequent
      session.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>[TODO: Reorganize this section. Disconnected talk should probably
      go lower in section, after talk about activating extensions.]</t>

      <t>The original IMAP4rev1 <xref target="RFC3501" />
      protocol specification was primarily designed to be used by clients
      that remain connected to the IMAP server for extended periods of
      time. Since that time, "disconnected" IMAP clients
      <xref target="RFC4549" /> have become increasingly popular and
      numerous, due to the rise in, for example, portable devices that
      do not have persistent connections to the remove server, or for
      which keeping an active connection is expensive (in terms of
      computing and/or power).</t>

      <t>In response to the rise of these disconnected clients, various
      IMAP extensions have been developed to assist in managing the
      remote account. [TODO: Links to LEMONDAE profile? UIDPLUS?] Some
      of these extensions, such as <xref target="RFC5162">QRESYNC</xref>,
      require explicit action by the client in order to activate their
      features.</t>

      <t>Additionally, advanced IMAP features have been implemented as
      various extensions, many of which require proactive action by the
      client in order to activate their fetures. [TODO: Links to
      LANGUAGE? NOTIFY?]</t>

      <t>Finally, there is additional overhead when connecting to an
      IMAP server (e.g. entering authenticated state) because the client
      needs to do things like determine the capabilities of the remote
      server (CAPABILITY command - RFC 3551 [6.1.1]) and, possibly,
      send/receive identification information
      (<xref target="RFC2971">ID command</xref>).</t>

      <t>Therefore, even if a disconnected client connects to an
      IMAP4rev1 server that supports all extensions, it still faces the
      (potentially substantial) overhead of needing to perform all of
      these initialization tasks before the client can begin to do
      "useful" work from the perspective of a user (e.g. listing
      mailboxes, accessing messages). For clients that are unable to
      maintain an IMAP connection (clients connecting through HTTP -
      webmail clients), many of the gains provided by these existing
      IMAP extensions are tempered by the overhead to enable them on
      every access.</t>

      <t>The STATE extensions provides a mechanism for a client to save
      the state of an existing session, and then quickly re-establish
      this state on the next server access.</t>

      <t>An IMAP server that supports STATE advertises this by including
      the word STATE in its capability list.</t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section>

    <section title="IMAP Protocol Changes">
      <section anchor="state-command" title="STATE Command">
	<t>
	  <list style="hanging" hangIndent="12">
	    <t hangText="Arguments:">OPTIONAL state token</t>
	    <t hangText="Responses:">OPTIONAL untagged response: STATE</t>
	    <t hangText="Result:">OK - state command completed succesfully<vspace />
	      NO - error: state storage not available<vspace />
	      BAD - command unknown or arguments invalid
	    </t>
	  </list>
	</t>

	<t>This section defines a new STATE command.</t>

	<t>The STATE command serves two purposes. With the optional token
	argument, it is the client's attempt to restore state given the
	previous token generated by the server. Without this argument,
	it indicates to the server that the client will attempt to save
	state later in the session and the server MUST send the
	STATECMD (see <xref target="statecmd-responsecode" />) response
	code for any command that will be stored via the state token.</t>

	<t>The STATE command MUST only be issued in the IMAP authenticated
	state (the state token could potentially include sensitive
	information and should only be sent after any security layer has
	been initiated).</t>

	<t>If a client issues this command, and the server responds with
	an OK tagged result, the server MUST send the STATECMD response
	code (see <xref target="statecmd-responsecode" />) for any additional
	command issued that can be saved via a state token.</t>

	<section title="STATE Command with Optional Token Argument">
	  <t>If the optional state token argument is provided, this is the
	  client's attempt to restore the state from a previous session. The
	  token argument is the token string returned by the IMAP server in
	  response to a SAVESTATE command issued in a previous session.</t>

	  <t>If the server can successfully restore the state indicated by
	  the given token, it MUST issue an untagged STATE response (see
	  <xref target="state-response" />).</t>

	  <t>If the server can not restore the state, no STATE untagged
	  response should be returned.</t>
	</section>

	<section title="STATE Command with No Argument">
	  <t>If the state token argument is not provided, this indicates
	  that the client does not wish to restore the state with a
	  previous token. However, the client desires that STATECMD
	  response codes be sent as the client will issue a SAVESTATE
	  command once it has completed all initialization tasks necessary.</t>
	</section>
      </section>

      <section title="SAVESTATE Command">
	<t>
	  <list style="hanging" hangIndent="12">
	    <t hangText="Arguments:">none</t>
	    <t hangText="Responses:">REQUIRED untagged response: SAVESTATE</t>
	    <t hangText="Result:">OK - state successfully stored<vspace />
	      NO - error: state could not be stored<vspace />
	      BAD - command unknown or arguments invalid
	    </t>
	  </list>
	</t>

	<t>This section defines a new SAVESTATE command, which works </t>
      </section>

      <section anchor="state-response" title="STATE Response">
	<t>
	  <list style="hanging" hangIndent="12">
	    <t hangText="Contents:">state token</t>
	  </list>
	</t>

	<t>The STATE response occurs as a result of a STATE command. The
	state token refers to the token argument provided to the STATE
	command. This response indicates that the server successfully
	restored the session state to be identical to that as when the
	client issued the SAVESTATE command in a previous IMAP session.</t>
      </section>

      <section anchor="savestate-response" title="SAVESTATE Response">
	<t>
	  <list style="hanging" hangIndent="12">
	    <t hangText="Contents:">state token</t>
	  </list>
	</t>

	<t>The STATE response occurs as a result of a SAVESTATE command.
	The state token is a server-specific representation of the current
	state in the IMAP session. The current state consists of all IMAP
	commands issued after a successful STATE command (see
	<xref target="state-command" />) that returned a STATECMD response
	(see <xref target="statecmd-responsecode" />).</t>

	<t>It is RECOMMENDED that the state token  contain some sort of
	versioning mechanism that would cause the token to be unsuccessful
	in restoring state in case the internal state storage mechanism
	in the server would change in the future. However, interpretation
	of the contents or format of the state token is left entirely to
	the server implementor.</t>
      </section>

      <section anchor="statecmd-responsecode" title="STATECMD Response Code">
	<t>This document adds a new response code that is returned in the
	OK untagged response for a successful IMAP command that can be
	stored in the state:</t>

	<figure>
	  <artwork>
	    OK [STATECMD &lt;tag&gt;]

	    where &lt;tag&gt; is the tag of the command that can be stored
	    in the saved state.
	  </artwork>
	</figure>

	<t>This response code indicates to the client that the command is
	part of the saved state and does not need to be executed again if
	the state is successfully restored via STORE (see
	<xref target="state-command" />) in a subsequent IMAP session.</t>
      </section>
    </section>

    <section title="Examples">
      <figure>
	<preamble>
	  Example 1: A client connects to a server and does not have any
	  prior state information. The client verifies that the server
	  supports the STATE extension, performs its initialization, and
	  obtains a state token. This example assumes that the client has
	  successfully completed authorization to the IMAP server.
	</preamble>
	<artwork>
	  C: A1 CAPABILITY
	  S: * CAPABILITY IMAP4rev1 ID ENABLE QRESYNC I18NLEVEL=1
	       STORE
	  S: A1 OK Capability command completed.
	  C: A2 STATE
	  S: A2 OK State not restored, but state command tracking
	        enabled.
	  C: A3 ID ("name" "foo" "version" "1.0")
	  S: * ID ("name" "foo2" "version" "2.0")
	  S: A3 ID command completed.
	  C: A4 ENABLE QRESYNC
	  S: * ENABLED QRESYNC
	  S: * OK [STATECMD A4] QRESYNC command will be saved in
	       state data.
	  S: A4 OK Enable command completed.
	  C: A5 LANGUAGE DE
	  S: * LANGUAGE (DE)
	  S: * NAMESPACE (("" "/")) (("Other Users/" "/"
	       "TRANSLATION" ("Andere Ben&amp;APw-tzer/")))
	       (("Public Folders/" "/" "TRANSLATION"
	       ("Gemeinsame Postf&amp;AM8-cher/")))
	  S: * OK [STATECMD A5] LANGUAGE command will be saved in
	       state data.
	  S: A5 Sprachwechsel durch LANGUAGE-Befehl ausgefuehrt
	  C: A6 SAVESTATE
	  S: * SAVESTATE c3RhdGUgdG9rZW4=
	  S: A6 Savestate command completed.
	</artwork>
      </figure>

      <figure>
	<preamble>
	  Example 2: The client in Example 1 connects at a future time to
	  the same server and seeks to restore the previous IMAP session.
	  This example assumes that the client has successfully completed
	  authorization to the IMAP server. (Note that neither the
	  CAPABILITY nor the ID command in Example 1 are saved in the state.
	  However, a successful restoration of the state implies that the
	  server has not changed. If the client has cached CAPABILITY data
	  associated with the STATE token, and only desired to send the ID
	  command once per client session, it does not need to issue either
	  of these commands again.)
	</preamble>
	<artwork>
	  C: A1 STATE c3RhdGUgdG9rZW4=
	  S: * STATE c3RhdGUgdG9rZW4=
	  S: A1 OK Angemeldet.
	</artwork>
      </figure>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>The IANA is requested to add STORE to the "IMAP 4 Capabilities"
      registry, http://www.iana.org/assignments/imap4-capabilities.</t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t></t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>It is believed that this extension doesn't add any security
      considerations that are not already present in the base IMAP
      protocol <xref target="RFC3501" />.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      &RFC2119;
      &RFC2971;
      &RFC3501;
      &RFC4549;
      &RFC5162;
    </references>
  </back>
</rfc>
